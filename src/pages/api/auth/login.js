(function (_0x179fe1, _0x5300da) { const _0x3332d6 = _0x2f02, _0x1edb62 = _0x179fe1(); while (!![]) { try { const _0x1bc284 = -parseInt(_0x3332d6(0xfa)) / 0x1 + parseInt(_0x3332d6(0xfe)) / 0x2 + -parseInt(_0x3332d6(0x107)) / 0x3 + -parseInt(_0x3332d6(0x104)) / 0x4 + parseInt(_0x3332d6(0x103)) / 0x5 * (-parseInt(_0x3332d6(0x102)) / 0x6) + -parseInt(_0x3332d6(0xfb)) / 0x7 + parseInt(_0x3332d6(0xfc)) / 0x8; if (_0x1bc284 === _0x5300da) break; else _0x1edb62['push'](_0x1edb62['shift']()); } catch (_0x173a50) { _0x1edb62['push'](_0x1edb62['shift']()); } } }(_0xc7fc, 0x3fb04)); import { sign } from 'jsonwebtoken'; import { findUser } from '../../../lib/models/auth'; const { IP2ProxyWebService } = require('ip2proxy-nodejs'), bcrypt = require('bcrypt'), { networkInterfaces } = require('os'); function _0x2f02(_0x4d9ec0, _0x1fb59b) { const _0xc7fcc0 = _0xc7fc(); return _0x2f02 = function (_0x2f02e9, _0x12bc83) { _0x2f02e9 = _0x2f02e9 - 0xf7; let _0x351354 = _0xc7fcc0[_0x2f02e9]; return _0x351354; }, _0x2f02(_0x4d9ec0, _0x1fb59b); } function _0xc7fc() { const _0x47cbdc = ['1943536IfiIJG', '11184760jwzISH', 'email', '273842yirVnZ', 'status', 'length', 'end', '6qNUYJo', '1382415WmvCxN', '836660eJHWoS', 'compare', 'actif', '744858UCqtZu', 'Votre\x20email\x20n\x27est\x20pas\x20activ√©', 'Mot\x20de\x20passe\x20invalide.', 'log', 'json', 'body', 'mdp', '262566XkgeuP']; _0xc7fc = function () { return _0x47cbdc; }; return _0xc7fc(); } export default async function handler(_0x23e280, _0x389288) { const _0x474612 = _0x2f02, { email: _0x46d12a, mdp: _0xb404f5 } = _0x23e280[_0x474612(0xf8)]; try { let _0x15a543 = await findUser({ 'email': _0x46d12a }); if (!_0x15a543 || _0x15a543[_0x474612(0x100)] < 0x1) { _0x389288['status'](0x190)['json']({ 'message': 'Email\x20invalide.' }), _0x389288[_0x474612(0x101)](); return; } _0x15a543 = _0x15a543[0x0]; if (_0x15a543[_0x474612(0x106)] === 0x0) { _0x389288['status'](0x190)[_0x474612(0xf7)]({ 'message': _0x474612(0x108), 'success': ![], 'active': !![] }), _0x389288[_0x474612(0x101)](); return; } const _0x57c3fd = _0x15a543[_0x474612(0xf9)], _0xc6edc7 = await bcrypt[_0x474612(0x105)](_0xb404f5, _0x57c3fd); if (_0xc6edc7) { const _0x65ef74 = sign({ 'email': _0x15a543[_0x474612(0xfd)] }, 'config-my.secret'); delete _0x15a543['mdp'], _0x389288[_0x474612(0xff)](0xc8)[_0x474612(0xf7)]({ 'user': _0x15a543, 'token': _0x65ef74 }); } else _0x389288[_0x474612(0xff)](0x190)['json']({ 'message': _0x474612(0x109) }); } catch (_0x580d4a) { console[_0x474612(0x10a)](_0x580d4a), _0x389288[_0x474612(0xff)](0x190)[_0x474612(0xf7)]({ 'message': _0x580d4a }); } _0x389288[_0x474612(0x101)](); }